

// Swagger doc refer: https://github.com/swaggo/swag
// @Summary 软删除，更新deleted=1
// @Schemes
// @Description 软删除，更新deleted=1，返回被删除的行数
// @Tags {TableModelName}
// @Param id query string true "id，多个时逗号隔开" default()
// @Accept json
// @Produce json
// @Success 200 {object} response.SuccessInt64 "{\"code\":200,\"msg\":\"ok\"}"
// @Failure 210 {object} response.FailedWithReason "{\"code\":400,\"msg\":\"参数错误\"}"
// @Router /api/v1/{TableModelNameLowCase}s/soft [delete]
// @Security ApiKeyAuth
func (c *{TableModelName}ApiType) SoftRemove(g *gin.Context) {

	idStr := g.Query("id")
	idStrs := strings.Split(idStr, ",")
	ids := []int64{}

	for _, idStr := range idStrs {
		id, err := strconv.ParseInt(idStr, 10, 64)
		if err != nil {
			g.JSON(response.FailedCode, &response.FailedWithReason{
			    Code: response.StatusBadRequest,
			    Msg:  "参数格式错误",
			    Data: map[string]string{"error": err.Error()},
		    })
			return
		}

		ids = append(ids, id)
	}
    if len(ids) < 1 {
        g.JSON(response.OKCode, &response.SuccessInt64{
			Code: response.StatusOK,
			Msg:  "ok",
			Data: 0,
		})
        return
    }

	effectRows, err := biz.{TableModelName}Service.SoftDelete(ids)

	if err != nil {
		g.JSON(response.FailedCode, &response.FailedWithReason{
			Code:  response.StatusInternalServerError,
			Msg:   "执行失败",
			Data: map[string]string{"error": err.Error()},
		})
	} else {
		g.JSON(response.OKCode, &response.SuccessInt64{
			Code: response.StatusOK,
			Msg:  "ok",
			Data: effectRows,
		})
	}
}

// Swagger doc refer: https://github.com/swaggo/swag
// @Summary 清除deleted=1的所有记录
// @Schemes
// @Description 清除deleted=1的所有记录，返回被清除的记录行数
// @Tags {TableModelName}
// @Accept json
// @Produce json
// @Success 200 {object} response.SuccessInt64 "{\"code\":200,\"msg\":\"ok\"}"
// @Failure 210 {object} response.FailedWithReason "{\"code\":500,\"msg\":\"执行失败\"}"
// @Router /api/v1/{TableModelNameLowCase}s/clean [delete]
// @Security ApiKeyAuth
func (c *{TableModelName}ApiType) Clean(g *gin.Context) {

	effectRows, err := biz.{TableModelName}Service.Clean()

	if err != nil {
		g.JSON(response.FailedCode, &response.FailedWithReason{
			Code:  response.StatusInternalServerError,
			Msg:   "执行失败",
			Data: map[string]string{"error": err.Error()},
		})
	} else {
		g.JSON(response.OKCode, &response.SuccessInt64{
			Code: response.StatusOK,
			Msg:  "ok",
			Data: effectRows,
		})
	}
}
