// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/okgotool/gocodegen/example/dal/model"
)

func newTestCat(db *gorm.DB) testCat {
	_testCat := testCat{}

	_testCat.testCatDo.UseDB(db)
	_testCat.testCatDo.UseModel(&model.TestCat{})

	tableName := _testCat.testCatDo.TableName()
	_testCat.ALL = field.NewField(tableName, "*")
	_testCat.ID = field.NewInt64(tableName, "id")
	_testCat.CatName = field.NewString(tableName, "cat_name")
	_testCat.CreatedBy = field.NewString(tableName, "created_by")
	_testCat.CreatedAt = field.NewTime(tableName, "created_at")
	_testCat.UpdatedBy = field.NewString(tableName, "updated_by")
	_testCat.UpdatedAt = field.NewTime(tableName, "updated_at")

	_testCat.fillFieldMap()

	return _testCat
}

type testCat struct {
	testCatDo testCatDo

	ALL       field.Field
	ID        field.Int64
	CatName   field.String
	CreatedBy field.String
	CreatedAt field.Time
	UpdatedBy field.String
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (t testCat) Table(newTableName string) *testCat {
	t.testCatDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t testCat) As(alias string) *testCat {
	t.testCatDo.DO = *(t.testCatDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *testCat) updateTableName(table string) *testCat {
	t.ALL = field.NewField(table, "*")
	t.ID = field.NewInt64(table, "id")
	t.CatName = field.NewString(table, "cat_name")
	t.CreatedBy = field.NewString(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewString(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *testCat) WithContext(ctx context.Context) *testCatDo { return t.testCatDo.WithContext(ctx) }

func (t testCat) TableName() string { return t.testCatDo.TableName() }

func (t testCat) Alias() string { return t.testCatDo.Alias() }

func (t *testCat) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *testCat) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["cat_name"] = t.CatName
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t testCat) clone(db *gorm.DB) testCat {
	t.testCatDo.ReplaceDB(db)
	return t
}

type testCatDo struct{ gen.DO }

func (t testCatDo) Debug() *testCatDo {
	return t.withDO(t.DO.Debug())
}

func (t testCatDo) WithContext(ctx context.Context) *testCatDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t testCatDo) ReadDB() *testCatDo {
	return t.Clauses(dbresolver.Read)
}

func (t testCatDo) WriteDB() *testCatDo {
	return t.Clauses(dbresolver.Write)
}

func (t testCatDo) Clauses(conds ...clause.Expression) *testCatDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t testCatDo) Returning(value interface{}, columns ...string) *testCatDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t testCatDo) Not(conds ...gen.Condition) *testCatDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t testCatDo) Or(conds ...gen.Condition) *testCatDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t testCatDo) Select(conds ...field.Expr) *testCatDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t testCatDo) Where(conds ...gen.Condition) *testCatDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t testCatDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *testCatDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t testCatDo) Order(conds ...field.Expr) *testCatDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t testCatDo) Distinct(cols ...field.Expr) *testCatDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t testCatDo) Omit(cols ...field.Expr) *testCatDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t testCatDo) Join(table schema.Tabler, on ...field.Expr) *testCatDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t testCatDo) LeftJoin(table schema.Tabler, on ...field.Expr) *testCatDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t testCatDo) RightJoin(table schema.Tabler, on ...field.Expr) *testCatDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t testCatDo) Group(cols ...field.Expr) *testCatDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t testCatDo) Having(conds ...gen.Condition) *testCatDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t testCatDo) Limit(limit int) *testCatDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t testCatDo) Offset(offset int) *testCatDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t testCatDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *testCatDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t testCatDo) Unscoped() *testCatDo {
	return t.withDO(t.DO.Unscoped())
}

func (t testCatDo) Create(values ...*model.TestCat) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t testCatDo) CreateInBatches(values []*model.TestCat, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t testCatDo) Save(values ...*model.TestCat) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t testCatDo) First() (*model.TestCat, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TestCat), nil
	}
}

func (t testCatDo) Take() (*model.TestCat, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TestCat), nil
	}
}

func (t testCatDo) Last() (*model.TestCat, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TestCat), nil
	}
}

func (t testCatDo) Find() ([]*model.TestCat, error) {
	result, err := t.DO.Find()
	return result.([]*model.TestCat), err
}

func (t testCatDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TestCat, err error) {
	buf := make([]*model.TestCat, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t testCatDo) FindInBatches(result *[]*model.TestCat, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t testCatDo) Attrs(attrs ...field.AssignExpr) *testCatDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t testCatDo) Assign(attrs ...field.AssignExpr) *testCatDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t testCatDo) Joins(fields ...field.RelationField) *testCatDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t testCatDo) Preload(fields ...field.RelationField) *testCatDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t testCatDo) FirstOrInit() (*model.TestCat, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TestCat), nil
	}
}

func (t testCatDo) FirstOrCreate() (*model.TestCat, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TestCat), nil
	}
}

func (t testCatDo) FindByPage(offset int, limit int) (result []*model.TestCat, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t testCatDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t testCatDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t *testCatDo) withDO(do gen.Dao) *testCatDo {
	t.DO = *do.(*gen.DO)
	return t
}
